{"version":3,"sources":["webpack:///webpack/bootstrap e63b823bd47b4ad056b6","webpack:///./js/game-item.js","webpack:///./js/main.js","webpack:///./style/app.scss","webpack:///./js/game.js","webpack:///./js/rabbit.js","webpack:///./js/food.js","webpack:///./js/wall.js","webpack:///./js/snake.js","webpack:///./js/field.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;AC5BA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;ACND,yC;;;;;;;;;;;ACAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,wBAAwB;AAC/C,2BAA2B,2BAA2B;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,WAAW;AAClC,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA,gEAAgE;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,8FAA8F,YAAY;AAC1G,8FAA8F,YAAY;AAC1G;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,6FAA6F,YAAY;AACzG;AACA;AAAA;AAAA;;;;;;;;;AC5WA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;ACzDA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;AC5BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA,gDAAgD,iCAAiC;AACjF,oDAAoD,iCAAiC;AACrF;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;ACjEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uCAAuC;AAClE;AACA;;AAEA,+BAA+B,mBAAmB;AAClzLA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;;AAEA,uBAAuB,wBAAwB;AAC/C;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA","file":"snake.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e63b823bd47b4ad056b6","export default class GameItem {\n    constructor() {\n        this._connected = false;\n    }\n\n    get isFood() {\n        return false;\n    }\n\n    get points() {\n        return [[-1, -1]];\n    }\n\n    connected() {\n        return this._connected;\n    }\n\n    disconnect() {\n        this._connected = false;\n    }\n\n    initialized() {\n        return false;\n    }\n\n    place() {\n        return false;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/game-item.js\n// module id = 0\n// module chunks = 0","import '../style/app.scss';\nimport Game from './game';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    let game = new Game();\n    game.run();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/main.js\n// module id = 1\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./style/app.scss\n// module id = 2\n// module chunks = 0","import Rabbit from './rabbit';\nimport Wall from './wall';\nimport Snake from './snake';\nimport Field from './field';\n\nexport default class Game {\n    constructor(sizeX = 10, sizeY = 20, baseSpeed = 400, speedFactor = 10, speedIterationsCount = 25, foodLifeTime = 20, foodFactor = 5,\n        inputQueueLimit = 4) {\n        this._field = new Field(sizeX, sizeY);\n        this._cells = new Array(sizeX);\n        for (let x = 0; x < sizeX; ++x)\n            this._cells[x] = new Array(sizeY);\n\n        this._createFieldLayout(sizeX, sizeY);\n        this._snake = null;\n        this._input = [];\n        this._iterationTimer = null;\n        this._level = 0;\n        this._speed = 0;\n        this._speedFactor = speedFactor;\n        this.highScore = Number(localStorage.getItem('highScore'));\n        this.arrowsEnable = Boolean(localStorage.getItem('snakeArrowsEnable'));\n        this._score = 0;\n        this._showHelp = false;\n        this._baseSpeed = baseSpeed;\n        this._baseSpeedIterationsCount = speedIterationsCount;\n        this._speedIterationsCount = speedIterationsCount;\n        this._shouldGenerateFood = false;\n        this._foodLifeTime = foodLifeTime;\n        this._foodFactor = foodFactor;\n        this._pause = false;\n        this._inputQueueLimit = inputQueueLimit;\n\n        this.nextIteration = this.nextIteration.bind(this);\n        this._onKeyUp = this._onKeyUp.bind(this);\n        this._onClick = this._onClick.bind(this);\n        this._availableKeys = [37, 38, 39, 40, 65, 87, 68, 83];\n\n        this._bindButtons();\n    }\n\n    get highScore() {\n        return this._highScore;\n    }\n\n    get score() {\n        return this._score;\n    }\n\n    get level() {\n        return this._level;\n    }\n\n    get speed() {\n        return this._speed;\n    }\n\n    get gameOver() {\n        return this._gameOver;\n    }\n\n    get arrowsEnable() {\n        return this._arrowsEnable;\n    }\n\n    set highScore(value) {\n        this._highScore = value;\n        document.getElementById('high-score').innerHTML = value;\n    }\n\n    set score(value) {\n        this._score = value;\n        if (this.highScore < value)\n            this.highScore = value;\n        document.getElementById('score').innerHTML = value;\n    }\n\n    set level(value) {\n        this._level = value;\n        document.getElementById('level').innerHTML = value;\n    }\n\n    set speed(value) {\n        this._speed = value;\n        document.getElementById('speed').innerHTML = value;\n    }\n\n    set gameOver(value) {\n        this._gameOver = !!value;\n        document.getElementById('game-over').innerHTML = value ? 'GAME<br>OVER' : '';\n    }\n\n    set arrowsEnable(value) {\n        this._arrowsEnable = !!value;\n        document.getElementById('snake-arrows-enable').className = 'push-button push-button_small' + (value ? ' push-button_active' : '');\n        localStorage.setItem('snakeArrowsEnable', this._arrowsEnable);\n    }\n\n    render() {\n        const table = this._field.table();\n\n        for (let x = 0; x < this._cells.length; ++x) {\n            for (let y = 0; y < this._cells[x].length; ++y)\n                this._cells[x][y].className = 'snake-cell' + (table[x][y] ? ' snake-cell_active' : '');\n        }\n    }\n\n    run(restart = false, config = null) {\n        if (restart)\n            this.reset();\n        this.gameOver = false;\n        this._speedIterationsCount = this._baseSpeedIterationsCount;\n        this._snake = new Snake();\n\n        let start = [Math.ceil(this._field.sizeX / 2), Math.ceil(this._field.sizeY / 2)];\n        let end = [start[0], start[1] - 1];\n\n        this._snake.init(start, end);\n        if (config !== null) {\n            config.forEach(item => {\n                let wall = new Wall();\n                wall.start = item.start;\n                wall.end = item.end;\n                this._field.addItem(wall);\n            });\n        }\n        this._field.addItem(this._snake);\n        let rabbit = new Rabbit(this._foodLifeTime);\n        this._field.addItem(rabbit);\n        this.render();\n        if (!restart)\n            this._bindEvents();\n\n        this._iterationTimer = setTimeout(this.nextIteration, this._timeout());\n        this._generatorCounter = this._generatorFrequency;\n    }\n\n    stop() {\n        if (this._iterationTimer) {\n            clearTimeout(this._iterationTimer);\n            this._iterationTimer = null;\n        }\n\n        window.removeEventListener('keyup', this._onKeyUp);\n        window.removeEventListener('click', this._onClick);\n        this.reset();\n    }\n\n    reset() {\n        this._shouldGenerateFood = false;\n        this._speedIterationsCount = this._baseSpeedIterationsCount;\n        this.score = 0;\n        this.speed = 0;\n        this.level = 0;\n        this._input = [];\n        this._iterationTimer = null;\n        this._pause = false;\n    }\n\n    nextIteration() {\n        --this._speedIterationsCount;\n        if (!this._speedIterationsCount) {\n            ++this.speed;\n            this._speedIterationsCount = this._baseSpeedIterationsCount;\n        }\n\n        let moved = true;\n        let keyPressed = true;\n\n        let food = this._field.items.filter(item => item.isFood);\n        food.forEach(item => {\n            if (item.lifeTime > 0)\n                --item.lifeTime;\n        });\n\n        let lastKey = this._input.shift();\n\n        switch(lastKey) {\n            case 87: // W\n            case 38: // UP\n                moved = this._snake.moveUp(this._field);\n                break;\n            case 83: // S\n            case 40: // DOWN\n                moved = this._snake.moveDown(this._field);\n                break;\n            case 65: // A\n            case 37: // LEFT\n                moved = this._snake.moveLeft(this._field);\n                break;\n            case 68: // D\n            case 39: // RIGHT\n                moved = this._snake.moveRight(this._field);\n                break;\n            default:\n                keyPressed = false;\n                break;\n        }\n\n        if (!keyPressed)\n            moved = this._snake.moveNext(this._field);\n\n        if (!moved) {\n            this.gameOver = true;\n            let highScore = Number(localStorage.getItem('highScore'));\n            this.highScore = Math.max(highScore, this.highScore);\n            localStorage.setItem('highScore', this.highScore);\n            return;\n        }\n\n        if (moved === 2) {\n            let itemsToRemove = food.filter(item => item.eaten);\n\n            itemsToRemove.forEach(item => {\n                this.score += Math.max(1, item.lifeTime * this._foodFactor);\n                this._field.removeItem(item);\n            });\n            this._snake.grow();\n            this._shouldGenerateFood = true;\n        }\n\n        if (this._shouldGenerateFood) {\n            this._shouldGenerateFood = false;\n            let rabbit = new Rabbit(this._foodLifeTime);\n            this._field.addItem(rabbit);\n        }\n\n        this.render();\n        this._iterationTimer = setTimeout(this.nextIteration, this._timeout());\n    }\n\n    addInput(keyCode) {\n        if (this._availableKeys.includes(keyCode) && this._input.length < this._inputQueueLimit)\n            this._input.push(keyCode);\n    }\n\n    _createFieldLayout(sizeX, sizeY) {\n        const container = document.getElementById('snake');\n\n        for (let y = 0; y < sizeY; ++y) {\n            for (let x = 0; x < sizeX; ++x) {\n                let cell = document.createElement('div');\n                cell.className = 'snake-cell';\n                this._cells[x][y] = cell;\n                container.appendChild(cell);\n            }\n        }\n\n    }\n\n    _clearFieldLayout() {\n        document.getElementById('snake').innerHTML = '';\n    }\n\n    _bindEvents() {\n        window.addEventListener('keyup', this._onKeyUp);\n        window.addEventListener('click', this._onClick);\n    }\n\n    _onKeyUp(event) {\n        if (event.keyCode === 82 || event.keyCode === 13) { // restart\n            if (this._showHelp)\n                return;\n\n            if (this._iterationTimer) {\n                clearTimeout(this._iterationTimer);\n                this._iterationTimer = null;\n                this._field.clear();\n                this.run(true);\n                return;\n            }\n        }\n        else if (event.keyCode === 80 || event.keyCode === 32) { // pause\n            if (!this._showHelp)\n                this._togglePause();\n            return;\n        }\n        else if (event.keyCode === 72 || event.keyCode === 27) { // help\n            this._showHelp = !this._showHelp;\n\n            document.getElementById('help').className = 'help' + (this._showHelp ? '' : ' help_hidden');\n            document.getElementById('snake-help').className = 'push-button push-button_small' + (this._showHelp ? ' push-button_active' : '');\n            if (!this._pause)\n                this._togglePause(true);\n        }\n        this.addInput(event.keyCode);\n    }\n\n    _onClick(event) {\n        if (this._showHelp || this._pause || this.arrowsEnable)\n            return;\n\n        const angle = this._snake.angle;\n        const x = event.x;\n        const y = event.y;\n        const snakeHead = this._getSnakeHeadElement();\n        const rect = snakeHead.getBoundingClientRect();\n        const rectXRight = rect.x + rect.width;\n        const rectYBottom = rect.y + rect.height;\n        const deltaXL = rect.x - x;\n        const deltaYT = rect.y - y;\n        const deltaXR = x - rectXRight;\n        const deltaYB = y - rectYBottom;\n\n        if (x < rect.x && ((deltaXL > deltaYT && angle === 1) || (deltaXL > deltaYB && angle === 3))) // left\n            this.addInput(37);\n        else if (y < rect.y && ((deltaYT > deltaXL && angle === 0) || (deltaYT > deltaXR && angle === 2))) // top\n            this.addInput(38);\n        else if (x > rectXRight && ((deltaXR > deltaYT && angle === 1) || (deltaXR > deltaYB && angle === 3))) // right\n            this.addInput(39);\n        else if (y > rectYBottom && ((deltaYB > deltaXL && angle === 0) || (deltaYB > deltaXR && angle === 2))) // bottom\n            this.addInput(40);\n    }\n\n    _togglePause(ignoreFlag = false) {\n        if (this._iterationTimer) {\n            clearTimeout(this._iterationTimer);\n            this._iterationTimer = null;\n            document.getElementById('pause').innerHTML = 'PAUSE';\n            document.getElementById('snake-pause').className = 'push-button push-button_big push-button_active';\n            if (!ignoreFlag)\n                this._pause = true;\n        }\n        else {\n            this._iterationTimer = setTimeout(this.nextIteration, this._timeout());\n            document.getElementById('pause').innerHTML = '';\n            document.getElementById('snake-pause').className = 'push-button push-button_big';\n            if (!ignoreFlag)\n                this._pause = false;\n        }\n    }\n\n    _timeout() {\n        return this._baseSpeed - this._speed * this._speedFactor;\n    }\n\n    _getSnakeHeadElement() {\n        const head = this._snake.points[this._snake.points.length - 1];\n        return this._cells[head[0]][head[1]];\n    }\n\n    _bindButtons() {\n        document.getElementById('snake-arrows-enable').addEventListener('click', () => this.arrowsEnable = !this.arrowsEnable);\n        document.getElementById('snake-pause').addEventListener('click', () => this._onKeyUp({keyCode: 32}));\n        document.getElementById('snake-reset').addEventListener('click', () => this._onKeyUp({keyCode: 13}));\n        document.getElementById('snake-left').addEventListener('click', () => {\n            if (this.arrowsEnable) {\n                this.addInput(37);\n            }\n        });\n        document.getElementById('snake-up').addEventListener('click', () => {\n            if (this.arrowsEnable)\n                this.addInput(38);\n        });\n        document.getElementById('snake-right').addEventListener('click', () => {\n            if (this.arrowsEnable)\n                this.addInput(39);\n        });\n        document.getElementById('snake-down').addEventListener('click', () => {\n            if (this.arrowsEnable)\n                this.addInput(40);\n        });\n        document.getElementById('snake-help').addEventListener('click', () => this._onKeyUp({keyCode: 27}));\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/game.js\n// module id = 3\n// module chunks = 0","import Food from './food';\n\nexport default class Rabbit extends Food {\n    constructor(lifeTime = 20, x = -1, y = -1) {\n        super(lifeTime);\n        this._x = x;\n        this._y = y;\n    }\n\n    get points() {\n        return [[this._x, this._y]];\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set x(value) {\n        this._x = value;\n    }\n\n    set y(value) {\n        this._y = value;\n    }\n\n    initialized() {\n        return this._x >= 0 && this._y >= 0;\n    }\n\n    place(field) {\n        if (this._connected)\n            return false;\n\n        let placed = false;\n\n        if (this.initialized())\n            return !(field.items.some(item => item.points.some(point => point[0] === this._x && point[1] === this._y)));\n        \n        do {\n            let x = Math.floor(Math.random() * field.sizeX);\n            let y = Math.floor(Math.random() * field.sizeY);\n            \n            if (field.items.some(item => item.points.some(point => point[0] === x && point[1] === y)))\n                continue;\n            \n            this.x = x;\n            this.y = y;\n            placed = true;\n        } while (!placed);\n\n        this._connected = true;\n        return true;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/rabbit.js\n// module id = 4\n// module chunks = 0","import GameItem from './game-item';\n\nexport default class Food extends GameItem {\n    constructor(lifeTime = 20) {\n        super();\n        this._lifeTime = lifeTime;\n        this._eaten = false;\n    }\n\n    get isFood() {\n        return true;\n    }\n\n    get lifeTime() {\n        return this._lifeTime;\n    }\n\n    get eaten() {\n        return this._eaten;\n    }\n\n    set lifeTime(value) {\n        this._lifeTime = value;\n    }\n\n    set eaten(value) {\n        this._eaten = !!value;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/food.js\n// module id = 5\n// module chunks = 0","import GameItem from './game-item';\n\nexport default class Wall extends GameItem {\n    constructor() {\n        super();\n        this._points = [];\n        this._start = [-1, -1];\n        this._end = [-1, -1];\n    }\n\n    get points() {\n        return this._points;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    set start(point) {\n        this._start = [point[0], point[1]];\n        this._updatePoints();\n    }\n\n    set end(point) {\n        this._end = [point[0], point[1]];\n        this._updatePoints();\n    }\n\n    initialized() {\n        return this._points.length > 1;\n    }\n\n    place(field) {\n        if (!this._connected && this.initialized() && !field.items.some(item => item.points.some(point =>\n            this._points.some(p => point[0] === p[0] && point[1] === p[1])))) {\n            this._connected = true;\n            return true;\n        }\n\n        return false;\n    }\n\n    _updatePoints() {\n        const start = this._start;\n        const end = this._end;\n\n        if (start[0] === -1 || start[1] === -1 || end[0] === -1 || end[1] === -1) {\n            this._points = [];\n            return;\n        }\n\n        let points = [];\n\n\n        for (let x = Math.min(start[0], end[0]); x <= Math.max(start[0], end[0]); ++x) {\n            for (let y = Math.min(start[1], end[1]); y <= Math.max(start[1], end[1]); ++y)\n                points.push([x, y]);\n        }\n\n        this._points = points;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/wall.js\n// module id = 6\n// module chunks = 0","import GameItem from './game-item';\n\nexport default class Snake extends GameItem {\n    constructor() {\n        super();\n        this._points = [];\n        this._grow = false;\n        this._angle = 0;\n    }\n\n    get points() {\n        return this._points;\n    }\n\n    get angle() {\n        return this._angle;\n    }\n\n    init(start, end) {\n        if (!(start instanceof Array) || !(end instanceof Array) || start.length !== 2 || end.length !== 2)\n        return;\n\n        this._points.push(start);\n        this._points.push(end);\n\n        if (start[0] < end[0])\n            this._angle = 2;\n        else if (start[0] > end[0])\n            this._angle = 0;\n        else if (start[1] < end[1])\n            this._angle = 3;\n        else\n            this._angle = 1;\n    }\n\n    grow() {\n        this._grow = true;\n    }\n\n    move(field, condition, deltaX = 0, deltaY = 0) {\n        let head = this._points[this._points.length - 1];\n        let newHead = [head[0] + deltaX, head[1] + deltaY];\n        let moved = 1;\n        if (!condition(newHead, field.sizeX, field.sizeY))\n            moved = 0;\n        else {\n            for (let i = 0; i < field.items.length && moved === 1; ++i) {\n                let item = field.items[i];\n                let points = item.points;\n\n                for (let j = 0; j < points.length; ++j) {\n                    if (points[j][0] === newHead[0] && points[j][1] === newHead[1]) {\n                        if (item === this && j === points.length - 2)\n                            moved = 3;\n                        else if (item.isFood) {\n                            moved = 2;\n                            item.eaten = true;\n                        }\n                        else\n                            moved = 0;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (moved && moved !== 3) {\n            if (this._grow)\n                this._grow = false;\n            else\n                this._points.splice(0, 1);\n            this._points.push(newHead);\n        }\n\n        return moved;\n    }\n\n    moveNext(field) {\n        switch (this._angle) {\n            case 0:\n                return this.moveLeft(field);\n            case 1:\n                return this.moveUp(field);\n            case 2:\n                return this.moveRight(field);\n            case 3:\n                return this.moveDown(field);\n        }\n        return 1;\n    }\n\n    moveLeft(field) {\n        let moved = this.move(field, head => head[0] >= 0, -1);\n        if (moved === 3)\n            return this.moveNext(field);\n\n        this._angle = 0;\n        return moved;\n    }\n\n    moveRight(field) {\n        let moved = this.move(field, (head, sizeX) => head[0] < sizeX, 1);\n        if (moved === 3)\n            return this.moveNext(field);\n\n        this._angle = 2;\n        return moved;\n    }\n\n    moveUp(field) {\n        let moved = this.move(field, head => head[1] >= 0, 0, -1);\n        if (moved === 3)\n            return this.moveNext(field);\n        \n        this._angle = 1;\n        return moved;\n    }\n\n    moveDown(field) {\n        let moved = this.move(field, (head, sizeX, sizeY) => head[1] < sizeY, 0, 1);\n        if (moved === 3)\n            return this.moveNext(field);\n\n        this._angle = 3;\n        return moved;\n    }\n\n    initialized() {\n        return this._points.length > 1;\n    }\n\n    place(field) {\n        if (this.initialized()) {\n            let placed = !field.items.some(item => item.points.some(point => this._points.some(p => p[0] === point[0] && p[1] === point[1])));\n\n            if (placed)\n                this._connected = true;\n\n            return placed;\n        }\n\n        let placed = false;\n        let counter = 0;\n        let outOfCounter = field.sizeX * field.sizeY;\n\n        do {\n            if (counter >= outOfCounter)\n                return false;\n\n            let x1 = Math.floor(Math.random() * field.sizeX);\n            let y1 = Math.floor(Math.random() * field.sizeY);\n            let angle = Math.floor(Math.random() * 4);\n            let x2, y2;\n            switch(angle) {\n                case 0:\n                    x2 = x1 ? x1 - 1 : x1 + 1;\n                    y2 = y1;\n                    break;\n                case 1:\n                    x2 = x1;\n                    y2 = y1 ? y1 - 1 : y1 + 1;\n                    break;\n                case 2:\n                    x2 = x1 < (field.sizeX - 1) ? x1 + 1 : x1 - 1;\n                    y2 = y1;\n                    break;\n                case 3:\n                    x2 = x1;\n                    y2 = y1 < (field.sizeY - 1) ? y1 + 1 : y1 - 1;\n                    break;\n            }\n            \n            if (field.items.some(item => item.points.some(point =>\n                (point[0] === x1 && point[1] === y1) || (point[0] === x2 && point[1] === y2)))) {\n                counter++;\n                continue;\n            }\n            \n            this._points = [[x1, y1], [x2, y2]];\n            this._connected = true;\n            placed = true;\n        } while (!placed);\n\n        return true;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/snake.js\n// module id = 7\n// module chunks = 0","import GameItem from './game-item';\n\nexport default class Field {\n    constructor(sizeX, sizeY) {\n        this._sizeX = sizeX;\n        this._sizeY = sizeY;\n        this._items = [];\n        this._count = 0;\n        this._maxCount = this._sizeX * this._sizeY;\n    }\n\n    get items() {\n        return this._items.slice();\n    }\n\n    table() {\n        let t = [];\n        for (let x = 0; x < this._sizeX; ++x) {\n            t.push([]);\n            for (let y = 0; y < this._sizeY; ++y) {\n                t[x].push(false);\n            }\n        }\n\n        for (let i = 0; i < this._items.length; ++i) {\n            let item = this._items[i];\n            let points = item.points;\n            for (let j = 0; j < points.length; ++j) {\n                let point = points[j];\n                t[point[0]][point[1]] = !(item.isFood && item.lifeTime < 6 && item.lifeTime % 2 !== 0);\n            }\n        }\n\n        return t;\n    }\n\n    get sizeX() {\n        return this._sizeX;\n    }\n\n    get sizeY() {\n        return this._sizeY;\n    }\n\n    get count() {\n        return this._count;\n    }\n\n    available() {\n        return (this._maxCount - this._count) > 0;\n    }\n\n    addItem(item) {\n        if (!(item instanceof GameItem) || !this.available() || this._items.findIndex(i => i === item) !== -1 || !item.place(this))\n            return false;\n\n        this._items.push(item);\n        this._count += item.points.length;\n        return true;\n    }\n\n    removeItem(item) {\n        let index = this._items.findIndex(i => i === item);\n        if (index === -1)\n            return;\n\n        this._count -= item.points.length;\n        this._items.splice(index, 1);\n    }\n\n    clear() {\n        this._items = [];\n        this._count = 0;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/field.js\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}