{"version":3,"sources":["webpack:///webpack/bootstrap 95ed11e6f39a79ba8c31","webpack:///./js/game-item.js","webpack:///./js/snake.js","webpack:///./js/main.js","webpack:///./style/app.scss","webpack:///./js/game.js","webpack:///./js/rabbit.js","webpack:///./js/food.js","webpack:///./js/wall.js","webpack:///./js/field.js","webpack:///./js/cell-renderer.js","webpack:///./js/levels.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;AC5BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uCAAuC;AAClE;AACA;;AAEA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;AC9IA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;ACZD,yuBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,WAAW;AAClC,2BAA2B,WAAW;AACtC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,wBAAwB;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA,gEAAgE;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kFAAkF,YAAY;AAC9F,kFAAkF,YAAY;AAC9F;AACA;AACA;AACA;AACA,iFAAiF,YAAY;AAC7F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;AC9bA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;ACnDA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;AC5BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA,gDAAgD,iCAAiC;AACjF,oDAAoD,iCAAiC;AACrF;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;;ACjEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA,wCAAwC,yBAAyB;AACjE;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,sCAAsC;AAC9E;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACjIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"snake.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 95ed11e6f39a79ba8c31","export default class GameItem {\n    constructor() {\n        this._connected = false;\n    }\n\n    get isFood() {\n        return false;\n    }\n\n    get points() {\n        return [[-1, -1]];\n    }\n\n    connected() {\n        return this._connected;\n    }\n\n    disconnect() {\n        this._connected = false;\n    }\n\n    initialized() {\n        return false;\n    }\n\n    place() {\n        return false;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/game-item.js\n// module id = 0\n// module chunks = 0","import GameItem from './game-item';\n\nexport default class Snake extends GameItem {\n    constructor() {\n        super();\n        this._points = [];\n        this._grow = false;\n        this._angle = 0;\n    }\n\n    get points() {\n        return this._points;\n    }\n\n    get angle() {\n        return this._angle;\n    }\n\n    init(start, end) {\n        if (!(start instanceof Array) || !(end instanceof Array) || start.length !== 2 || end.length !== 2)\n            return;\n\n        this._points.push(start);\n        this._points.push(end);\n\n        if (start[0] < end[0])\n            this._angle = 2;\n        else if (start[0] > end[0])\n            this._angle = 0;\n        else if (start[1] < end[1])\n            this._angle = 3;\n        else\n            this._angle = 1;\n    }\n\n    grow() {\n        this._grow = true;\n    }\n\n    move(field, condition, deltaX = 0, deltaY = 0) {\n        let head = this._points[this._points.length - 1];\n        let newHead = [head[0] + deltaX, head[1] + deltaY];\n        let moved = 1;\n        if (!condition(newHead, field.sizeX, field.sizeY))\n            moved = 0;\n        else {\n            for (let i = 0; i < field.items.length && moved === 1; ++i) {\n                let item = field.items[i];\n                let points = item.points;\n\n                for (let j = 0; j < points.length; ++j) {\n                    if (points[j][0] === newHead[0] && points[j][1] === newHead[1]) {\n                        if (item === this && j === points.length - 2)\n                            moved = 3;\n                        else if (item.isFood) {\n                            moved = 2;\n                            item.eaten = true;\n                        }\n                        else\n                            moved = 0;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (moved && moved !== 3) {\n            if (this._grow)\n                this._grow = false;\n            else\n                this._points.splice(0, 1);\n            this._points.push(newHead);\n        }\n\n        return moved;\n    }\n\n    moveNext(field) {\n        switch (this._angle) {\n            case 0:\n                return this.moveLeft(field);\n            case 1:\n                return this.moveUp(field);\n            case 2:\n                return this.moveRight(field);\n            case 3:\n                return this.moveDown(field);\n        }\n        return 1;\n    }\n\n    moveLeft(field) {\n        let moved = this.move(field, head => head[0] >= 0, -1);\n        if (moved === 3)\n            return this.moveNext(field);\n\n        this._angle = 0;\n        return moved;\n    }\n\n    moveRight(field) {\n        let moved = this.move(field, (head, sizeX) => head[0] < sizeX, 1);\n        if (moved === 3)\n            return this.moveNext(field);\n\n        this._angle = 2;\n        return moved;\n    }\n\n    moveUp(field) {\n        let moved = this.move(field, head => head[1] >= 0, 0, -1);\n        if (moved === 3)\n            return this.moveNext(field);\n\n        this._angle = 1;\n        return moved;\n    }\n\n    moveDown(field) {\n        let moved = this.move(field, (head, sizeX, sizeY) => head[1] < sizeY, 0, 1);\n        if (moved === 3)\n            return this.moveNext(field);\n\n        this._angle = 3;\n        return moved;\n    }\n\n    initialized() {\n        return this._points.length > 1;\n    }\n\n    place(field) {\n        if (!this.initialized())\n            return false;\n        let placed = !field.items.some(item => item.points.some(point =>\n            this._points.some(p => p[0] === point[0] && p[1] === point[1])));\n\n        if (placed)\n            this._connected = true;\n\n        return placed;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/snake.js\n// module id = 1\n// module chunks = 0","import '../style/app.scss';\nimport Game from './game';\nimport cellRenderer from './cell-renderer';\nimport levels from './levels';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    let game = new Game(levels);\n    game.setCellRenderer(cellRenderer);\n    if (game.createFieldLayout())\n        game.run(false, true);\n    else\n        console.log('Could not create a field layout.');\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/main.js\n// module id = 2\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./style/app.scss\n// module id = 3\n// module chunks = 0","import Rabbit from './rabbit';\nimport Wall from './wall';\nimport Snake from './snake';\nimport Field from './field';\n\nexport default class Game {\n    constructor(levels = null, sizeX = 10, sizeY = 20, baseSpeed = 300, speedFactor = 10, speedIterationsCount = 25,\n                foodLifeTime = 25, foodFactor = 1, inputQueueLimit = 4, cellRenderer = null) {\n        this._field = new Field(sizeX, sizeY);\n        this._elements = {\n            display: document.getElementById('snake-display'),\n            highScore: document.getElementById('high-score'),\n            score: document.getElementById('score'),\n            level: document.getElementById('level'),\n            speed: document.getElementById('speed'),\n            gameOver: document.getElementById('game-over'),\n            help: document.getElementById('help'),\n            pause: document.getElementById('pause'),\n            colorsEnableButton: document.getElementById('snake-colors-enable'),\n            helpButton: document.getElementById('snake-help'),\n            pauseButton: document.getElementById('snake-pause'),\n            resetButton: document.getElementById('snake-reset'),\n            leftButton: document.getElementById('snake-left'),\n            upButton: document.getElementById('snake-up'),\n            rightButton: document.getElementById('snake-right'),\n            downButton: document.getElementById('snake-down')\n        };\n\n        this._sizeX = sizeX;\n        this._sizeY = sizeY;\n        this._snake = null;\n        this._input = [];\n        this._iterationTimer = null;\n        this._level = -1;\n        this._speed = 0;\n        this._speedFactor = speedFactor;\n        this.highScore = Number(localStorage.getItem('snakeHighScore'));\n        let colorsEnable = localStorage.getItem('snakeColorsEnable');\n        this.colorsEnable = colorsEnable === undefined ? false : (colorsEnable === \"true\");\n        this._score = 0;\n        this._levelScore = 0;\n        this._showHelp = false;\n        this._baseSpeed = baseSpeed;\n        this._baseSpeedIterationsCount = speedIterationsCount;\n        this._speedIterationsCount = speedIterationsCount;\n        this._shouldGenerateFood = false;\n        this._foodLifeTime = foodLifeTime;\n        this._foodFactor = foodFactor;\n        this._pause = false;\n        this._inputQueueLimit = inputQueueLimit;\n        this._levels = levels;\n        this._cellRenderer = cellRenderer;\n        this._activePrerenderedCell = null;\n        this._inactivePrerenderedCell = null;\n        this._foodPrerenderedCell = null;\n        this._snakePrerenderedCell = null;\n        this._shouldRedrawDisplay = false;\n\n        this.nextIteration = this.nextIteration.bind(this);\n        this._onKeyUp = this._onKeyUp.bind(this);\n        this.redrawDisplay = this.redrawDisplay.bind(this);\n        this._availableKeys = [37, 38, 39, 40, 65, 87, 68, 83];\n\n        this._bindButtons();\n    }\n\n    get highScore() {\n        return this._highScore;\n    }\n\n    get score() {\n        return this._score;\n    }\n\n    get level() {\n        return this._level;\n    }\n\n    get speed() {\n        return this._speed;\n    }\n\n    get gameOver() {\n        return this._gameOver;\n    }\n\n    get colorsEnable() {\n        return this._colorsEnable;\n    }\n\n    set highScore(value) {\n        this._highScore = value;\n        this._elements.highScore.innerHTML = value;\n    }\n\n    set score(value) {\n        this._score = value;\n        if (this.highScore < value)\n            this.highScore = value;\n        this._elements.score.innerHTML = value;\n    }\n\n    set level(value) {\n        this._level = value;\n        this._elements.level.innerHTML = value;\n    }\n\n    set speed(value) {\n        this._speed = value;\n        this._elements.speed.innerHTML = value;\n    }\n\n    set gameOver(value) {\n        this._gameOver = !!value;\n        this._elements.gameOver.innerHTML = value ? 'GAME<br>OVER' : '';\n    }\n\n    set colorsEnable(value) {\n        this._colorsEnable = !!value;\n        this._elements.colorsEnableButton.className = 'push-button push-button_small' + (value ? ' push-button_active' : '');\n        localStorage.setItem('snakeColorsEnable', this._colorsEnable);\n        this.redrawDisplay();\n    }\n\n    destroy() {\n        this.stop();\n        this.clearFieldLayout();\n    }\n\n    setCellRenderer(renderer) {\n        if (typeof(renderer) === 'function')\n            this._cellRenderer = renderer;\n    }\n\n    render() {\n        const table = this._field.table();\n        const display = this._elements.display;\n        const width = display.width / this._sizeX;\n        const height = display.height / this._sizeY;\n        const ctx = display.getContext('2d');\n\n        for (let i = 0; i < table.length; ++i) {\n            ctx.clearRect(table[i].x * width, table[i].y * height, width, height);\n            let cell;\n            switch(table[i].value) {\n                case 0:\n                    cell = this._inactivePrerenderedCell;\n                    break;\n                case 1:\n                    cell = this._foodPrerenderedCell;\n                    break;\n                case 2:\n                    cell = this._snakePrerenderedCell;\n                    break;\n                case 3:\n                    cell = this._activePrerenderedCell;\n            }\n            ctx.drawImage(cell, table[i].x * width, table[i].y * height);\n        }\n    }\n\n    run(restart = false, levelUp = false) {\n        this.reset(levelUp);\n        this.gameOver = false;\n        this._speedIterationsCount = this._baseSpeedIterationsCount;\n        this._snake = new Snake();\n\n        this._levelScore = 0;\n        let start, end;\n\n        if (levelUp || restart)\n            [start, end] = this._levelUp();\n\n        if (!start || !end) {\n            start = [Math.ceil(this._field.sizeX / 2), Math.ceil(this._field.sizeY / 2)];\n            end = [start[0], start[1] - 1];\n        }\n\n        this._snake.init(start, end);\n        this._field.addItem(this._snake);\n        this.render();\n        let rabbit = new Rabbit(this._foodLifeTime);\n        this._field.addItem(rabbit);\n        this.render();\n        if (!restart)\n            this._bindEvents();\n\n        this._iterationTimer = setTimeout(this.nextIteration, this._timeout());\n    }\n\n    stop() {\n        if (this._iterationTimer) {\n            clearTimeout(this._iterationTimer);\n            this._iterationTimer = null;\n        }\n\n        window.removeEventListener('keyup', this._onKeyUp);\n        window.removeEventListener('resize', this.redrawDisplay);\n        this.reset();\n    }\n\n    reset(levelUp = false) {\n        this._field.clear();\n        this._shouldGenerateFood = false;\n        this._speedIterationsCount = this._baseSpeedIterationsCount;\n        if (!levelUp) {\n            this.score = 0;\n            this.speed = 0;\n            this.level = -1;\n        }\n        this._input = [];\n        this._iterationTimer = null;\n        this._pause = false;\n    }\n\n    nextIteration() {\n        if (this._shouldRedrawDisplay)\n            this._redrawDisplay();\n\n        --this._speedIterationsCount;\n        if (!this._speedIterationsCount) {\n            ++this.speed;\n            this._speedIterationsCount = this._baseSpeedIterationsCount;\n        }\n\n        let moved = true;\n        let keyPressed = true;\n\n        let food = this._field.items.filter(item => item.isFood);\n        food.forEach(item => {\n            if (item.lifeTime > 0)\n                --item.lifeTime;\n        });\n\n        let lastKey = this._input.shift();\n\n        switch (lastKey) {\n            case 87: // W\n            case 38: // UP\n                moved = this._snake.moveUp(this._field);\n                break;\n            case 83: // S\n            case 40: // DOWN\n                moved = this._snake.moveDown(this._field);\n                break;\n            case 65: // A\n            case 37: // LEFT\n                moved = this._snake.moveLeft(this._field);\n                break;\n            case 68: // D\n            case 39: // RIGHT\n                moved = this._snake.moveRight(this._field);\n                break;\n            default:\n                keyPressed = false;\n                break;\n        }\n\n        if (!keyPressed)\n            moved = this._snake.moveNext(this._field);\n\n        if (!moved) {\n            this.gameOver = true;\n            let highScore = Number(localStorage.getItem('snakeHighScore'));\n            this.highScore = Math.max(highScore, this.highScore);\n            localStorage.setItem('snakeHighScore', this.highScore);\n            return;\n        }\n\n        if (moved === 2) {\n            let itemsToRemove = food.filter(item => item.eaten);\n\n            itemsToRemove.forEach(item => {\n                this._incrementLevelScore(Math.max(1, item.lifeTime * this._foodFactor));\n                this._field.removeItem(item);\n            });\n            if (this._levelScore >= this._levels[this.level % this._levels.length].score) {\n                this.run(false, true);\n                return;\n            }\n            this._snake.grow();\n            this._shouldGenerateFood = true;\n        }\n\n        if (this._shouldGenerateFood) {\n            this._shouldGenerateFood = false;\n            let rabbit = new Rabbit(this._foodLifeTime);\n            this._field.addItem(rabbit);\n        }\n\n        this.render();\n        this._iterationTimer = setTimeout(this.nextIteration, this._timeout());\n    }\n\n    addInput(keyCode) {\n        const input = this._input;\n        const len = input.length;\n\n        if (this._availableKeys.includes(keyCode) && len < this._inputQueueLimit && (!len || input[len - 1] !== keyCode))\n            input.push(keyCode);\n    }\n\n    createFieldLayout() {\n        if (!this._cellRenderer)\n            return false;\n\n        const sizeX = this._sizeX;\n        const sizeY = this._sizeY;\n        const display = this._elements.display;\n\n        display.width = display.clientWidth;\n        display.height = display.clientHeight;\n        const ctx = display.getContext('2d');\n\n        const cellWidth = display.width / sizeX;\n        const cellHeight = display.height / sizeY;\n        const colorsEnable = this.colorsEnable;\n\n        this._activePrerenderedCell = this._cellRenderer(cellWidth, cellHeight, true);\n        this._inactivePrerenderedCell = this._cellRenderer(cellWidth, cellHeight);\n        this._foodPrerenderedCell = this._cellRenderer(cellWidth, cellHeight, true, colorsEnable ? 'food' : 'default');\n        this._snakePrerenderedCell = this._cellRenderer(cellWidth, cellHeight, true, colorsEnable ? 'snake' : 'default');\n\n        for (let i = 0; i < sizeX; ++i) {\n            for (let j = 0; j < sizeY; ++j)\n                ctx.drawImage(this._inactivePrerenderedCell, i * cellWidth, j * cellHeight);\n        }\n\n        return true;\n    }\n\n    clearFieldLayout() {\n        const display = this._elements.display;\n\n        display.width = display.clientWidth;\n        display.height = display.clientHeight;\n    }\n\n    redrawDisplay() {\n        if (this.gameOver)\n            this._redrawDisplay();\n        else\n            this._shouldRedrawDisplay = true;\n    }\n\n    _incrementLevelScore(value) {\n        this._levelScore += value;\n        this.score += value;\n    }\n\n    _levelUp() {\n        ++this.level;\n        const level = this._levels[this.level % this._levels.length];\n        this.speed = level.speed + Math.floor(this.level / this._levels.length);\n\n        for (let i = 0; i < level.items.length; ++i) {\n            const item = level.items[i];\n\n            if (item.type === 'wall') {\n                let wall = new Wall();\n                wall.start = item.start;\n                wall.end = item.end;\n                this._field.addItem(wall);\n            }\n        }\n\n        return [level.snakeStart, level.snakeEnd];\n    }\n\n    _bindEvents() {\n        window.addEventListener('keyup', this._onKeyUp);\n        window.addEventListener('resize', this.redrawDisplay);\n    }\n\n    _onKeyUp(event) {\n        if (event.keyCode === 82 || event.keyCode === 13) { // 'r' or ENTER: restart\n            if (this._showHelp || this._pause)\n                return;\n\n            if (this._iterationTimer) {\n                clearTimeout(this._iterationTimer);\n                this._iterationTimer = null;\n                this.run(true);\n                return;\n            }\n        }\n        else if (event.keyCode === 80 || event.keyCode === 32) { // 'p' or SPACE: pause\n            if (!this._showHelp)\n                this._togglePause();\n            return;\n        }\n        else if (event.keyCode === 72 || event.keyCode === 27) { // 'h' or ESC: help\n            this._showHelp = !this._showHelp;\n\n            this._elements.help.className = 'help' + (this._showHelp ? '' : ' help_hidden');\n            this._elements.helpButton.className = 'push-button push-button_small' + (this._showHelp ? ' push-button_active' : '');\n            if (!this._pause)\n                this._togglePause(true);\n        }\n        else if (event.keyCode === 67) // 'c': colors\n            this.colorsEnable = !this.colorsEnable;\n        this.addInput(event.keyCode);\n    }\n\n    _togglePause(ignoreFlag = false) {\n        if (this.gameOver)\n            return;\n\n        if (this._iterationTimer) {\n            clearTimeout(this._iterationTimer);\n            this._iterationTimer = null;\n            this._elements.pause.innerHTML = 'PAUSE';\n            this._elements.pauseButton.className = 'push-button push-button_big push-button_active';\n            if (!ignoreFlag)\n                this._pause = true;\n        }\n        else {\n            this._iterationTimer = setTimeout(this.nextIteration, this._timeout());\n            this._elements.pause.innerHTML = '';\n            this._elements.pauseButton.className = 'push-button push-button_big';\n            if (!ignoreFlag)\n                this._pause = false;\n        }\n    }\n\n    _timeout() {\n        return this._baseSpeed - this._speed * this._speedFactor;\n    }\n\n    _bindButtons() {\n        this._elements.pauseButton.addEventListener('click', () => this._onKeyUp({keyCode: 32}));\n        this._elements.resetButton.addEventListener('click', () => this._onKeyUp({keyCode: 13}));\n        this._elements.leftButton.addEventListener('click', () => this.addInput(37));\n        this._elements.upButton.addEventListener('click', () => this.addInput(38));\n        this._elements.rightButton.addEventListener('click', () => this.addInput(39));\n        this._elements.downButton.addEventListener('click', () => this.addInput(40));\n        this._elements.helpButton.addEventListener('click', () => this._onKeyUp({keyCode: 27}));\n        this._elements.colorsEnableButton.addEventListener('click', () => this.colorsEnable = !this.colorsEnable);\n    }\n\n    _redrawDisplay() {\n        this._shouldRedrawDisplay = false;\n        this._field.clearPreviousTable();\n        this.createFieldLayout();\n        this.render();\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/game.js\n// module id = 4\n// module chunks = 0","import Food from './food';\n\nexport default class Rabbit extends Food {\n    constructor(lifeTime = 20, x = -1, y = -1) {\n        super(lifeTime);\n        this._x = x;\n        this._y = y;\n    }\n\n    get points() {\n        return [[this._x, this._y]];\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set x(value) {\n        this._x = value;\n    }\n\n    set y(value) {\n        this._y = value;\n    }\n\n    initialized() {\n        return this._x >= 0 && this._y >= 0;\n    }\n\n    place(field) {\n        if (this._connected)\n            return false;\n\n        if (this.initialized())\n            return !(field.items.some(item => item.points.some(point => point[0] === this._x && point[1] === this._y)));\n\n        const cells = field.freeCells();\n        if (!cells)\n            return false;\n\n        let i = cells[Math.floor(Math.random() * cells.length)];\n        this.y = Math.floor(i / field.sizeX);\n        this.x = i % field.sizeX;\n\n        this._connected = true;\n        return true;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/rabbit.js\n// module id = 5\n// module chunks = 0","import GameItem from './game-item';\n\nexport default class Food extends GameItem {\n    constructor(lifeTime = 25) {\n        super();\n        this._lifeTime = lifeTime;\n        this._eaten = false;\n    }\n\n    get isFood() {\n        return true;\n    }\n\n    get lifeTime() {\n        return this._lifeTime;\n    }\n\n    get eaten() {\n        return this._eaten;\n    }\n\n    set lifeTime(value) {\n        this._lifeTime = value;\n    }\n\n    set eaten(value) {\n        this._eaten = !!value;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/food.js\n// module id = 6\n// module chunks = 0","import GameItem from './game-item';\n\nexport default class Wall extends GameItem {\n    constructor() {\n        super();\n        this._points = [];\n        this._start = [-1, -1];\n        this._end = [-1, -1];\n    }\n\n    get points() {\n        return this._points;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    set start(point) {\n        this._start = [point[0], point[1]];\n        this._updatePoints();\n    }\n\n    set end(point) {\n        this._end = [point[0], point[1]];\n        this._updatePoints();\n    }\n\n    initialized() {\n        return this._points.length > 1;\n    }\n\n    place(field) {\n        if (!this._connected && this.initialized() && !field.items.some(item => item.points.some(point =>\n                this._points.some(p => point[0] === p[0] && point[1] === p[1])))) {\n            this._connected = true;\n            return true;\n        }\n\n        return false;\n    }\n\n    _updatePoints() {\n        const start = this._start;\n        const end = this._end;\n\n        if (start[0] === -1 || start[1] === -1 || end[0] === -1 || end[1] === -1) {\n            this._points = [];\n            return;\n        }\n\n        let points = [];\n\n\n        for (let x = Math.min(start[0], end[0]); x <= Math.max(start[0], end[0]); ++x) {\n            for (let y = Math.min(start[1], end[1]); y <= Math.max(start[1], end[1]); ++y)\n                points.push([x, y]);\n        }\n\n        this._points = points;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/wall.js\n// module id = 7\n// module chunks = 0","import GameItem from './game-item';\nimport Snake from './snake';\n\nexport default class Field {\n    constructor(sizeX, sizeY) {\n        this._sizeX = sizeX;\n        this._sizeY = sizeY;\n        this._items = [];\n        this._count = 0;\n        this._maxCount = this._sizeX * this._sizeY;\n        this._previousTable = null;\n    }\n\n    get items() {\n        return this._items.slice();\n    }\n\n    table() {\n        let tableDiff = [];\n        let t = new Array(this._maxCount).fill(0);\n        const sizeX = this._sizeX;\n        const sizeY = this._sizeY;\n\n        if (this._previousTable) {\n            for (let i = 0; i < this._items.length; ++i) {\n                let item = this._items[i];\n                let points = item.points;\n                for (let j = 0; j < points.length; ++j) {\n                    let point = points[j];\n                    let index = sizeX * point[1] + point[0];\n                    if (item.isFood)\n                        t[index] = (item.lifeTime < 6 && item.lifeTime % 2 !== 0) ? 0 : 1;\n                    else if (item instanceof Snake)\n                        t[index] = 2;\n                    else\n                        t[index] = 3;\n                }\n            }\n            for (let x = 0; x < sizeX; ++x) {\n                for (let y = 0; y < sizeY; ++y) {\n                    let i = sizeX * y + x;\n                    let value = t[i];\n                    if (this._previousTable[i] !== value)\n                        tableDiff.push({x: x, y: y, value: value});\n                }\n            }\n        }\n        else {\n            for (let i = 0; i < this._items.length; ++i) {\n                let item = this._items[i];\n                let points = item.points;\n                for (let j = 0; j < points.length; ++j) {\n                    let point = points[j];\n                    let draw;\n                    if (item.isFood)\n                        draw = (item.lifeTime < 6 && item.lifeTime % 2 !== 0) ? 0 : 1;\n                    else if (item instanceof Snake)\n                        draw = 2;\n                    else\n                        draw = 3;\n\n                    if (draw)\n                        tableDiff.push({x: point[0], y: point[1], value: draw});\n                    t[sizeX * point[1] + point[0]] = draw;\n                }\n            }\n        }\n\n        this._previousTable = t;\n\n        return tableDiff;\n    }\n\n    get sizeX() {\n        return this._sizeX;\n    }\n\n    get sizeY() {\n        return this._sizeY;\n    }\n\n    get count() {\n        return this._count;\n    }\n\n    available() {\n        return (this._maxCount - this._count) > 0;\n    }\n\n    addItem(item) {\n        if (!(item instanceof GameItem) || !this.available() || this._items.findIndex(i => i === item) !== -1 || !item.place(this))\n            return false;\n\n        this._items.push(item);\n        this._count += item.points.length;\n        return true;\n    }\n\n    removeItem(item) {\n        let index = this._items.findIndex(i => i === item);\n        if (index === -1)\n            return;\n\n        this._count -= item.points.length;\n        this._items.splice(index, 1);\n    }\n\n    clear() {\n        this._items = [];\n        this._count = 0;\n    }\n\n    freeCells() {\n        if (!this._previousTable)\n            return null;\n\n        const t = this._previousTable;\n        let cells = [];\n        for (let i = 0; i < t.length; ++i) {\n            if (!t[i])\n                cells.push(i);\n        }\n\n        return cells;\n    }\n\n    clearPreviousTable() {\n        this._previousTable = null;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/field.js\n// module id = 8\n// module chunks = 0","function cellRenderer(width, height, active = false, type = 'default') {\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n\n    const context = canvas.getContext('2d');\n    const paddingFactor = 0.03555;\n    const borderFactor = 0.075;\n    const paddingX = width * paddingFactor;\n    const paddingY = height * paddingFactor;\n    const borderWidth = Math.min(width * borderFactor, height * borderFactor);\n    const squarePaddingFactor = 0.2;\n    const lr = width * squarePaddingFactor;\n    const tb = height * squarePaddingFactor;\n    const color = (() => {\n        if (!active)\n            return 'rgba(0, 0, 0, 0.2)';\n        else if (type === 'food')\n            return 'rgba(135, 64, 80, 0.9)';\n        else if (type === 'snake')\n            return '#0c3a4f';\n        return 'rgba(0, 0, 0, 0.9)';\n    })();\n\n    context.strokeStyle = color;\n    context.fillStyle = color;\n    context.lineWidth = borderWidth;\n    context.strokeRect(paddingX + borderWidth / 2, paddingY + borderWidth / 2,\n        width - paddingX * 2 - borderWidth, height - paddingY * 2 - borderWidth);\n    context.fillRect(lr, tb, width - lr * 2, height - tb * 2);\n\n    return canvas;\n}\n\nexport default cellRenderer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/cell-renderer.js\n// module id = 9\n// module chunks = 0","const levels = [\n    {\n        speed: 0,\n        score: 100,\n        items: []\n    },\n    {\n        speed: 0,\n        score: 150,\n        items: [\n            {\n                type: 'wall',\n                start: [1, 1],\n                end: [2, 2]\n            },\n            {\n                type: 'wall',\n                start: [7, 1],\n                end: [8, 2]\n            }\n        ]\n    },\n    {\n        speed: 0,\n        score: 200,\n        items: [\n            {\n                type: 'wall',\n                start: [1, 1],\n                end: [2, 2]\n            },\n            {\n                type: 'wall',\n                start: [7, 1],\n                end: [8, 2]\n            },\n            {\n                type: 'wall',\n                start: [1, 17],\n                end: [2, 18]\n            },\n            {\n                type: 'wall',\n                start: [7, 17],\n                end: [8, 18]\n            }\n        ]\n    },\n    {\n        speed: 0,\n        score: 250,\n        items: [\n            {\n                type: 'wall',\n                start: [1, 1],\n                end: [1, 4]\n            },\n            {\n                type: 'wall',\n                start: [2, 1],\n                end: [4, 1]\n            },\n            {\n                type: 'wall',\n                start: [3, 3],\n                end: [4, 4]\n            },\n            {\n                type: 'wall',\n                start: [4, 18],\n                end: [7, 18]\n            },\n            {\n                type: 'wall',\n                start: [8, 15],\n                end: [8, 18]\n            },\n            {\n                type: 'wall',\n                start: [5, 15],\n                end: [6, 16]\n            }\n        ]\n    },\n    {\n        speed: 0,\n        score: 300,\n        items: [\n            {\n                type: 'wall',\n                start: [1, 1],\n                end: [1, 10]\n            },\n            {\n                type: 'wall',\n                start: [2, 1],\n                end: [4, 1]\n            },\n            {\n                type: 'wall',\n                start: [3, 3],\n                end: [4, 6]\n            },\n            {\n                type: 'wall',\n                start: [2, 18],\n                end: [7, 17]\n            },\n            {\n                type: 'wall',\n                start: [8, 12],\n                end: [8, 18]\n            },\n            {\n                type: 'wall',\n                start: [9, 0],\n                end: [9, 2]\n            }\n        ]\n    },\n    {\n        speed: 0,\n        score: 350,\n        items: [\n            {\n                type: 'wall',\n                start: [0, 3],\n                end: [1, 3]\n            },\n            {\n                type: 'wall',\n                start: [0, 14],\n                end: [5, 14]\n            },\n            {\n                type: 'wall',\n                start: [2, 6],\n                end: [2, 11]\n            },\n            {\n                type: 'wall',\n                start: [3, 6],\n                end: [4, 6]\n            },\n            {\n                type: 'wall',\n                start: [3, 11],\n                end: [6, 11]\n            },\n            {\n                type: 'wall',\n                start: [4, 3],\n                end: [6, 3]\n            },\n            {\n                type: 'wall',\n                start: [7, 3],\n                end: [7, 11]\n            },\n            {\n                type: 'wall',\n                start: [4, 17],\n                end: [7, 19]\n            },\n            {\n                type: 'wall',\n                start: [8, 14],\n                end: [9, 14]\n            }\n        ]\n    }\n];\n\nexport default levels;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/levels.js\n// module id = 10\n// module chunks = 0"],"sourceRoot":""}